import {createSlice,createAsyncThunk} from "@reduxjs/toolkit";

import axios from "axios";

export const getAssets = createAsyncThunk('assets/getAssets', async ()=>{
    const response = await axios.get('/assets');
    return response.data
})

export const addFavorite = createAsyncThunk('assets/addFavorite', async ({id,category})=>{
    const response = await axios.post('/favorite/add',{id,category})
    return response.data
})

export const removeFavorite = createAsyncThunk('assets/removeFavorite', async ({id,category})=>{
    const response = await axios.post('/favorite/remove',{id,category})
    return response.data
})

export const addPortfolio = createAsyncThunk('assets/add-portfolio', async ({id,category})=>{
    const response = await axios.post('/portfolio/add',{id,category})
    return response.data
})

const initialState = {
    active:"cryptocurrency",
    assets:{
        cryptocurrency:[],
        forex:[],
        stocks:[],
        favorite:[],
        most_traded:[],
        top_riser:[],
        top_fallers:[],
        most_volatile:[],
    },
    leverage:{
        cryptocurrency:'2:1',
        stocks:'20:1',
        forex:'30:1',
    },
    selectedAsset:null,
    /**Toggles between trading, tradeinfo,and news Trade-1,tradeinfo-2,news-3*/
    activetradeSidebar:1
}

const assetSlice = createSlice({

    name:'assets',
    initialState,
    reducers:{
        /**
         * this sets the state to hold which asset is displayed
         * on the assets table bases on assets state eg forex,commodity
         * @param {*} state
         * @param {*} action
         */
        setActiveAsset(state,action){

            state.active = action.payload
            state.selectedAsset = null

        },
        /**Programmatically update assets prices generated by javascript */
        updateAsset(state,action){
            
            if( (['cryptocurrency','forex','stocks',
            'oil_market','commodity']).includes(action.payload.name)){
                state.assets[action.payload.name].data = action.payload.assets
            }else{
                state.assets[action.payload.name] = action.payload.assets   
            }
            
        },

        /**
         * this programatically set up the values for 'most traded,top-risers etc',
         * @param {*} state 
         * @param {*} actions 
         */
        setCategoryAssets(state,actions){
            
            state.assets[actions.payload.name] = actions.payload.data
            state.active = actions.payload.name
            
        },
        /**
         * this holds the assets selected to update sidebar
         * this data comprises of specific data for the particular assets
         * @param {*} state
         * @param {*} action
         */
        setSelectedAsset(state,action){

            state.activetradeSidebar = 1// 1 is trade
            state.selectedAsset = action.payload
        },

        setActiveTradeSidebar(state,action){

            state.activetradeSidebar = action.payload
        }

    },
    extraReducers:(builder)=>{
        builder.addCase(getAssets.fulfilled, (state,action)=>{

            state.assets.cryptocurrency = action.payload.data.crypto
            state.assets.forex = action.payload.data.forex
            state.assets.stocks = action.payload.data.stocks
            state.assets.favorite = action.payload.data.favorite

        })
        .addCase(addFavorite.fulfilled, (state,action)=>{

            if(action.payload.status == 1){
                state.assets.favorite = action.payload.data
            }

        })
        .addCase(removeFavorite.fulfilled, (state,action)=>{
            /**This changes the active category to cryptocurrency once the 
             * last asset has been removed from the favorite list*/
            if(action.meta.arg.changeSelectedAsset){
                state.active = 'cryptocurrency'
            }
            state.assets.favorite = action.meta.arg.data
        })
        .addCase(addPortfolio.fulfilled, (state,action)=>{
        })

        .addCase(addPortfolio.rejected, (state,action)=>{
            state.status = 'failed'
            state.error = action.error.message
        })
    }
})


export const {updateState,setActiveAsset,setSelectedAsset,
    setCategoryAssets,updateAsset,setActiveTradeSidebar} = assetSlice.actions

export default assetSlice.reducer 
